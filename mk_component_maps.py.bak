import healpy as hp
import numpy as np
import pandas as pd
import os
from mk_file_list import mk_file_list


def param_map(trace_summary_dir, param_name, mask_file, out_dir, out_prefix):

    """

    Function for generating parameter maps from pixel traces.
    
    Inputs
    ------
    trace_summary_dir: The directory where trace summaries are stored - str.
    param_name: Name of the parameter in the pymc3 model - str.
    mask_file: Mask file used in component separation - str.
    out_dir: The output directory for the parameter maps - str.
    out_prefix: The output prefix for the parameter maps - str.

    Returns
    -------
    rhat_map: Map of the Gelman-Rubin statistic for the given parameter - numpy.ndarray.
    neff_map: Map of the effective sample size for the given parameter - numpy.ndarray.
    mu_map: Map of the mean parameter values in each pixel - numpy.ndarray.
    sigma_map: Map of the sd for the parameter in each pixel - numpy.ndarray.

    Also saves the maps.

    """

    mask = hp.read_map(mask_file)
    no_pix = len(mask)
    good_idx = np.where(mask==1.)[0]
    
    rhat_map = np.ones(no_pix)*hp.UNSEEN
    neff_map = np.ones(no_pix)*hp.UNSEEN
    mu_map = np.ones(no_pix)*hp.UNSEEN
    sigma_map = np.ones(no_pix)*hp.UNSEEN

    trace_summary_files = mk_file_list(trace_summary_dir, '.csv', absolute=True)

    for i in range (0, len(good_idx)):

        progress = (i + 1.0)/len(good_idx)
        print('Percentage through constructing maps = {}%'.format(progress))

        df = pd.read_csv(trace_summary_files[i], index_col=0)
        rhat_map[good_idx[i]] = df['Rhat'][param_name]
        neff_map[good_idx[i]] = df['n_eff'][param_name]
        mu_map[good_idx[i]] = df['mean'][param_name]
        sigma_map[good_idx[i]] = df['sd'][param_name]
        
    hp.write_map('{}{}_{}_rhat_map.fits'.format(out_dir, out_prefix, param_name), rhat_map, overwrite=True)
    hp.write_map('{}{}_{}_neff_map.fits'.format(out_dir, out_prefix, param_name), neff_map, overwrite=True)
    hp.write_map('{}{}_{}_mu_map.fits'.format(out_dir, out_prefix, param_name), mu_map, overwrite=True)
    hp.write_map('{}{}_{}_sigma_map.fits'.format(out_dir, out_prefix, param_name), sigma_map, overwrite=True)

    return rhat_map, neff_map, mu_map, sigma_map

param_map('./trace_summary/litebird/Q_traces/', 'cmb_amp', './masks/test_mask_nside2.fits', './cmb_maps/litebird/', 'litebird_Q')
param_map('./trace_summary/planck_litebird/Q_traces/', 'cmb_amp', './masks/test_mask_nside2.fits', './cmb_maps/planck_litebird/', 'planck_litebird_Q')
